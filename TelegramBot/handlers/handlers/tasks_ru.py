from bot import bot
from telebot import types
from utils.language import get_lang
from handlers.tasks_common import safe_edit_or_send

# ---- –¢–µ–∫—Å—Ç—ã (RU) ----
def tasks_main_text_ru() -> str:
    return (
        "üìã *–ó–∞–¥–∞–Ω–∏—è*\n"
        "–ü—Ä–æ—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ."
    )

def follow_us_text_ru() -> str:
    return (
        "üì£ *–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å:*\n"
        "‚Ä¢ [TikTok](https://www.tiktok.com/@devils_kafka)\n"
        "‚Ä¢ [X](https://x.com/devils_kafka)\n"
        "‚Ä¢ [Facebook](https://www.facebook.com/devilsuniversecom)"
    )

def tasks_main_markup_ru() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üì£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="tasks_follow_us"))
    return kb

def follow_us_markup_ru() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="tasks_back"))
    return kb

# ---- –í—Ö–æ–¥ —á–µ—Ä–µ–∑ reply-–∫–Ω–æ–ø–∫—É ----
@bot.message_handler(func=lambda msg: msg.text == "üìã –ó–∞–¥–∞–Ω–∏—è")
def handle_tasks_ru(message):
    uid = message.from_user.id
    if get_lang(uid) != "ru":
        return
    bot.send_message(
        message.chat.id,
        tasks_main_text_ru(),
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=tasks_main_markup_ru()
    )

# ---- Callbacks (—Å —Ñ–∏–ª—å—Ç—Ä–æ–º —è–∑—ã–∫–∞ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ) ----
@bot.callback_query_handler(func=lambda c: c.data == "tasks_follow_us" and get_lang(c.from_user.id) == "ru")
def cb_tasks_follow_us_ru(call):
    safe_edit_or_send(call, follow_us_text_ru(), follow_us_markup_ru())
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data == "tasks_back" and get_lang(c.from_user.id) == "ru")
def cb_tasks_back_ru(call):
    safe_edit_or_send(call, tasks_main_text_ru(), tasks_main_markup_ru())
    bot.answer_callback_query(call.id)
