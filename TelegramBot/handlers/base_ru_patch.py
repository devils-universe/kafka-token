from telebot import types
from bot import bot

# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
import handlers.tasks as tasks
import handlers.shoop as shoop
import handlers.airdrop as airdrop
import handlers.game as game
import handlers.web as web

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard) ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ---
def main_menu_ru() -> types.ReplyKeyboardMarkup:
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üìã –ó–∞–¥–∞–Ω–∏—è", "üõí –ú–∞–≥–∞–∑–∏–Ω", "ü™ô –ö—É–ø–∏—Ç—å $KAFKA")
    return markup

# --- –ò–Ω–ª–∞–π–Ω-–º–µ–Ω—é (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –±–µ–∑ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π) ---
def inline_root_ru() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup()
    kb.row(
        types.InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å $KAFKA", callback_data="open_buy"),
        types.InlineKeyboardButton("üìã –ó–∞–¥–∞–Ω–∏—è", callback_data="open_tasks"),
    )
    kb.row(
        types.InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="open_shoop"),
        types.InlineKeyboardButton("üéÅ –ê–∏—Ä–¥—Ä–æ–ø", callback_data="open_airdrop"),
        types.InlineKeyboardButton("üéÆ –ò–≥—Ä–∞", callback_data="open_game"),
    )
    kb.row(
        types.InlineKeyboardButton("üåê –í–µ–±", callback_data="open_web")
    )
    return kb

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ "–≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞" –º–æ–¥—É–ª—è ---
def _try_call(module, call):
    """
    –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –≤—ã–∑–≤–∞—Ç—å –≤ –º–æ–¥—É–ª–µ –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π
    –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–∞–∑–¥–µ–ª–∞. –ü–æ—Ä—è–¥–æ–∫ –ø–æ–¥–æ–±—Ä–∞–Ω –ø–æ —á–∞—Å—Ç—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º.
    –§—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–∏–±–æ (call), –ª–∏–±–æ (message).
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤—ã–∑–≤–∞–ª–∏, –∏–Ω–∞—á–µ False.
    """
    candidates = [
        "open_inline", "open_ru", "open",
        "show_inline", "show_main", "show",
        "render", "start_inline", "start",
        "handle_inline", "handle_main", "handle",
    ]
    for name in candidates:
        func = getattr(module, name, None)
        if callable(func):
            try:
                # –ø—Ä–æ–±—É–µ–º (call)
                func(call)
                return True
            except TypeError:
                # –ø—Ä–æ–±—É–µ–º (message)
                try:
                    func(call.message)
                    return True
                except TypeError:
                    pass
    return False

# --- –†–æ—É—Ç–µ—Ä –ø–æ –∫–æ–ª–±—ç–∫–∞–º ---
ROUTES = {
    "open_tasks":   tasks,
    "open_shoop":   shoop,
    "open_airdrop": airdrop,
    "open_game":    game,
    "open_web":     web,
    # "open_buy" –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ handlers.buy_ru (—Ç–∞–º —Å–≤–æ–π —Ö—ç–Ω–¥–ª–µ—Ä cb_open_buy)
}

@bot.callback_query_handler(func=lambda c: getattr(c, "data", "") in ROUTES)
def cb_open_section_ru(call):
    bot.answer_callback_query(call.id)  # —Å–Ω–∏–º–∞–µ–º ‚Äú–∫—Ä—É—Ç–∏–ª–∫—É‚Äù —Å—Ä–∞–∑—É

    module = ROUTES[call.data]
    if _try_call(module, call):
        # –º–æ–¥—É–ª—å —Å–∞–º –æ—Ç—Ä–∏—Å–æ–≤–∞–ª —ç–∫—Ä–∞–Ω (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ edit_message_text)
        return

    # –§–æ–ª–±—ç–∫, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –¥–∞–ª –≤—Ö–æ–¥–Ω–æ–π —Ç–æ—á–∫–∏
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        reply_markup=inline_root_ru()
    )
