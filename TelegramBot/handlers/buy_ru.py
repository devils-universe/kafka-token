from bot import bot
from telebot import types
import logging

CONTRACT = "0x0023caf04B4fAc8B894Fc7fA49d38ddc4606a816"

def buy_main_text_ru() -> str:
    return (
        "ü™ô *–ö—É–ø–∏—Ç—å $KAFKA*\n"
        "_BEP-20 –Ω–∞ BNB Smart Chain_\n\n"
        f"‚Ä¢ *–ö–æ–Ω—Ç—Ä–∞–∫—Ç:* `{CONTRACT}`\n"
        "‚Ä¢ Decimals: `18`\n"
        "‚Ä¢ –°–ª–∏–ø–ø–µ–¥–∂: –æ–±—ã—á–Ω–æ `0.5‚Äì1%`\n\n"
        "üëâ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É –Ω–∏–∂–µ. –ï—Å–ª–∏ –≤–ø–µ—Ä–≤—ã–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ *–ö–∞–∫ –∫—É–ø–∏—Ç—å*."
    )

def build_buy_markup_ru() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(row_width=3)
    kb.row(
        types.InlineKeyboardButton("üé≤ OKX", url="https://web3.okx.com/ru/token/bsc/0x0023caf04b4fac8b894fc7fa49d38ddc4606a816"),
        types.InlineKeyboardButton("ü•û Pancake", url="https://pancakeswap.finance/swap?outputCurrency=0x0023caf04b4fac8b894fc7fa49d38ddc4606a816&chain=bsc"),
        types.InlineKeyboardButton("üå∂ Paprika", url="https://coinpaprika.com/coin/kafka-kafka/")
    )
    kb.row(
        types.InlineKeyboardButton("üìà GeckoTerminal", url="https://www.geckoterminal.com/bsc/tokens/0x0023caf04b4fac8b894fc7fa49d38ddc4606a816"),
        types.InlineKeyboardButton("üîé BscScan", url="https://bscscan.com/token/0x0023caf04B4fAc8B894Fc7fA49d38ddc4606a816"),
        types.InlineKeyboardButton("üì¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/devils_kafka")
    )
    kb.row(
        types.InlineKeyboardButton("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å CA", callback_data="buy_copy_ca"),
        types.InlineKeyboardButton("‚ùì –ö–∞–∫ –∫—É–ø–∏—Ç—å", callback_data="buy_howto_ru")
    )
    return kb

def _safe_edit_or_send(call, text, reply_markup=None):
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode="Markdown",
            disable_web_page_preview=True,
            reply_markup=reply_markup
        )
    except Exception as e:
        logging.warning(f"[buy_ru] edit_message_text failed: {e}. Sending new message.")
        bot.send_message(
            call.message.chat.id,
            text,
            parse_mode="Markdown",
            disable_web_page_preview=True,
            reply_markup=reply_markup
        )

@bot.message_handler(func=lambda msg: getattr(msg, "text", "") == "ü™ô –ö—É–ø–∏—Ç—å $KAFKA")
def handle_buy_ru_message(message):
    bot.send_message(
        message.chat.id,
        buy_main_text_ru(),
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=build_buy_markup_ru()
    )

@bot.callback_query_handler(func=lambda c: isinstance(getattr(c, "data", None), str)
                                       and (c.data == "open_buy" or c.data.startswith("buy_")))
def cb_buy_ru(call):
    from utils.language import t, get_lang
    if get_lang(call.from_user.id) != 'ru':
        return
    data = call.data
    if data == "open_buy":
        _safe_edit_or_send(call, buy_main_text_ru(), build_buy_markup_ru())
    elif data == "buy_copy_ca":
        uid = call.from_user.id
        bot.answer_callback_query(call.id, t(uid, "contract_sent"))
        bot.send_message(
            call.message.chat.id,
            f"üîó *–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ $KAFKA (BSC):*\n`{CONTRACT}`",
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
    elif data == "buy_howto_ru":
        text = (
            "‚ùì *–ö–∞–∫ –∫—É–ø–∏—Ç—å $KAFKA*\n\n"
            "1) *–ö–æ—à–µ–ª—ë–∫*: MetaMask –∏–ª–∏ OKX Wallet. –°–µ—Ç—å ‚Äî *BNB Smart Chain (BSC)*.\n"
            "2) *–ü–æ–ø–æ–ª–Ω–∏—Ç–µ BNB* –¥–ª—è –≥–∞–∑–∞.\n"
            "3) *–ò–º–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–∞*: –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç:\n"
            f"`{CONTRACT}`\n"
            "4) *–°–≤–æ–ø –Ω–∞ Pancake/OKX*: –≤—ã–±–∏—Ä–∞–π—Ç–µ $KAFKA –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.\n"
            "5) *–°–ª–∏–ø–ø–µ–¥–∂*: –Ω–∞—á–Ω–∏—Ç–µ —Å 0.5‚Äì1%. –ï—Å–ª–∏ —Å–≤–æ–ø –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç ‚Äî —Å–ª–µ–≥–∫–∞ —É–≤–µ–ª–∏—á—å—Ç–µ.\n\n"
            "üí° *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å*: —Å–≤–µ—Ä—è–π—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫."
        )
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton("ü•û –û—Ç–∫—Ä—ã—Ç—å Pancake", url="https://pancakeswap.finance/swap?outputCurrency=0x0023caf04b4fac8b894fc7fa49d38ddc4606a816&chain=bsc")
        )
        kb.row(
            types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="open_buy"),
            types.InlineKeyboardButton("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å CA", callback_data="buy_copy_ca")
        )
        _safe_edit_or_send(call, text, kb)
    else:
        _safe_edit_or_send(call, buy_main_text_ru(), build_buy_markup_ru())
    bot.answer_callback_query(call.id)
