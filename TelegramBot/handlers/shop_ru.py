from bot import bot
from telebot import types
from utils.language import get_lang
from handlers.shop_common import (
    PAYMENT_ADDRESS, STICKER_IDS,
    safe_edit_or_send, send_relic_photos_group, build_share_button
)

# ===== RU TEXTS =====
SHOP_MAIN_RU = (
    "üõí *–ú–∞–≥–∞–∑–∏–Ω*\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ."
)
RELIC_CAPTION_RU = (
    "*Relic #R001 ‚Äî The Smoked Core*\n"
    "–†—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –≥—Ä–∞–≤–∏—Ä–æ–≤–∫–∞ Kafka.\n\n"
    "üí≥ *–û–ø–ª–∞—Ç–∞*: `{address}`\n"
    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –º–∞—Å—Ç–µ—Ä—É, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ TX-—Ö–µ—à."
)
RELIC_ORDER_RU = (
    "–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:\n"
    "1) –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –∞–¥—Ä–µ—Å:\n`{address}`\n"
    "2) –ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞–ø–∏—Å–∞—Ç—å –º–∞—Å—Ç–µ—Ä—É¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ TX-—Ö–µ—à.\n"
    "3) –ú—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –∏ —Å–æ–≥–ª–∞—Å—É–µ–º –¥–æ—Å—Ç–∞–≤–∫—É."
)
BTN_MSG_ARTISAN_RU = "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –º–∞—Å—Ç–µ—Ä—É"
BTN_SHARE_PAYMENT_RU = "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∞–¥—Ä–µ—Å–æ–º –æ–ø–ª–∞—Ç—ã"
BTN_BACK_SHOP_RU = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω"

STICKER_INFO_RU = (
    "–ü–æ–ª–Ω—ã–π –ø–∞–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤ –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è.\n"
    "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ.\n\n"
    "üí≥ –û–ø–ª–∞—Ç–∞: `{address}`"
)
BTN_TEXT_ME_RU = "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å"

# ===== MENUS (RU) =====
def _menu_ru() -> types.InlineKeyboardMarkup:
    m = types.InlineKeyboardMarkup()
    m.add(
        types.InlineKeyboardButton("ü™à KafkaFilters", callback_data="shop_kafkafilters"),
        types.InlineKeyboardButton("üé≠ KafkaStickers", callback_data="shop_kafkastickers")
    )
    return m

def _relic_keyboard_ru() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(BTN_MSG_ARTISAN_RU, url="https://t.me/devils_kafka"))
    kb.add(build_share_button(BTN_SHARE_PAYMENT_RU, "–ê–¥—Ä–µ—Å –æ–ø–ª–∞—Ç—ã –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞"))
    kb.add(types.InlineKeyboardButton(BTN_BACK_SHOP_RU, callback_data="back_to_shop"))
    return kb

# ===== ENTRY (reply-–∫–Ω–æ–ø–∫–∏) =====
@bot.message_handler(func=lambda msg: msg.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
def handle_shoop_ru(message):
    uid = message.from_user.id
    if get_lang(uid) != "ru":
        return
    bot.send_message(
        message.chat.id, SHOP_MAIN_RU, parse_mode="Markdown", reply_markup=_menu_ru()
    )

# ===== OPEN FROM INLINE (callback) =====
def open(call):
    uid = call.from_user.id
    if get_lang(uid) != "ru":
        return
    safe_edit_or_send(call, SHOP_MAIN_RU, _menu_ru())

# ===== RELIC: KafkaFilters =====
@bot.callback_query_handler(func=lambda call: call.data == "shop_kafkafilters"
                                         and get_lang(call.from_user.id) == "ru")
def handle_shop_kafkafilters_ru(call):
    chat_id = call.message.chat.id
    send_relic_photos_group(chat_id, RELIC_CAPTION_RU.format(address=PAYMENT_ADDRESS))
    bot.send_message(
        chat_id,
        RELIC_ORDER_RU.format(address=PAYMENT_ADDRESS),
        parse_mode="Markdown",
        reply_markup=_relic_keyboard_ru()
    )
    bot.answer_callback_query(call.id)

# ===== STICKERS =====
@bot.callback_query_handler(func=lambda call: call.data == "shop_kafkastickers"
                                         and get_lang(call.from_user.id) == "ru")
def handle_shop_kafkastickers_ru(call):
    for sid in STICKER_IDS:
        bot.send_sticker(call.message.chat.id, sid)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(BTN_TEXT_ME_RU, url="https://t.me/devils_kafka"))
    markup.add(types.InlineKeyboardButton(BTN_BACK_SHOP_RU, callback_data="back_to_shop"))
    bot.send_message(
        call.message.chat.id,
        STICKER_INFO_RU.format(address=PAYMENT_ADDRESS),
        parse_mode="Markdown",
        reply_markup=markup
    )
    bot.answer_callback_query(call.id)

# ===== BACK =====
@bot.callback_query_handler(func=lambda call: call.data == "back_to_shop"
                                         and get_lang(call.from_user.id) == "ru")
def back_to_shop_ru(call):
    safe_edit_or_send(call, SHOP_MAIN_RU, _menu_ru())
    bot.answer_callback_query(call.id)
